(function(){

  'use strict';
  var arrowColorRested;

  $(document).ready(initialize);

  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      //document.getElementById('status').innerHTML = 'Please log ' +
      //  'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      //document.getElementById('status').innerHTML = 'Please log ' +
      //  'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '948683018492740',
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.1' // use version 2.1
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      //document.getElementById('status').innerHTML =
      //  'Thanks for logging in, ' + response.name + '!';
    });
  }

  function initialize(){
    initializeEventHandlers();
    positionHeadsOneColumnCenter();
  }

  function initializeEventHandlers() {
    $('.three-column-button').click(positionHeadsThreeColumns);
    $('.panorama-column-button').click(positionHeadsPanorama);
    $('.content-footer').mouseenter(tryptGlow);
    $('.content-footer').mouseleave(tryptFade);
    $('#facebook-event').click(getFacebookEvent);
  }

  function positionHeadsOneColumnCenter() {
    $('div[class^="fold"]').css('left', '33%');
    $('div[class^="panel"]').width('75%');
  }

  function positionHeadsThreeColumns() {
    $('div[class^="panel"]').animate({'width':'33%'});
    var folds = $('[class^="fold"]');
    $('.foldL').animate({'left': '0%'}, 1500);
    $('.foldC').animate({'left': '25%'}, 1500);
    $('.foldR').animate({'left': '50%'}, 1500);
    _.each(folds, function(fold){
      var $left = $(fold).find('.panelL');
      var $center = $(fold).find('.panelC');
      var $right = $(fold).find('.panelR');
      $left.css('left', '25%');
      $center.css('left', '37%');
      $right.css('left', '50%');
    });
  }

  function positionHeadsPanorama(){
    tryptGlow();
    $('.foldL').animate({'left': '0%'}, 1000);
    $('.foldC').animate({'left': '25%'}, 1000);
    $('.foldR').animate({'left': '50%'}, 1000);
    var folds = $('[class^="fold"]');
    _.each(folds, function(fold){
      var $left = $(fold).find('.panelL');
      var $center = $(fold).find('.panelC');
      var $right = $(fold).find('.panelR');
      $left.css('left', '0%');
      $center.css('left', '25%');
      $right.css('left', '50%');
    });
    $('div[class^="panel"]').animate({'width':'50%'}, 1000, function(){
      $.ajax({type: 'get', url: 'events/display', success: getEvents});
    });
    $(window).bind('resize', sizeEvents);
  }

  function getEvents() {
    $('.arrow-container').bind('click', eventsScroll);
    arrowColorRested = $('#events-arrow-left').css('border-right-color');
    sizeEvents(function(){
      tryptFade();
    });
  }

  function sizeEvents(callback) {
    var $scrollWindow = $('#events-scroll-window');
    var screenWidth = window.screen.width;
    var viewportWidth = window.innerWidth;
    var viewportWidthRatio = viewportWidth / screenWidth;
    var widthRatio;
    // Check to determine if device is in portrait or landscape orientation.
    if(viewportWidthRatio < 0.5 || viewportWidth < window.innerHeight){
      widthRatio = 0.75;
    } else {
      widthRatio = 0.50;
    }
    var windowWidth = parseFloat($scrollWindow.width());
    var windowHeight = parseFloat($scrollWindow.height());
    var $scrollPanel = $('#events-scroll-panel');
    var $cells = $('.event-cell');
    var cellCount = $cells.length;
    var heightRatio = 1.00;
    var newCellWidth = windowWidth * widthRatio;
    var newCellHeight = windowHeight * heightRatio;
    var widthNeeded = newCellWidth * cellCount;
    var marginRatio = 0.06;
    var marginPerSide = newCellWidth * marginRatio;
    var safetyMargin = (newCellWidth + (marginPerSide * 4)) * 2;
    var newPanelWidth = widthNeeded + (marginPerSide * (cellCount * 2)) + safetyMargin;
    $scrollPanel.css('width', newPanelWidth.toString());
    $cells.css('margin', '0px ' + (marginPerSide * 2).toString() + 'px');
    $cells.css('width', newCellWidth.toString());
    $cells.css('height', newCellHeight.toString());
    if(callback){callback();}
  }

  function eventsScroll() {
    var $self = $(this);
    var id = $self.attr('id');
    var $scrollPanel = $('#events-scroll-panel');
    var $scrollWindow = $('#events-scroll-window');
    var side;
    _.each(id.split('-'), function(str){
      if(str === 'left'){ side = 'right';}
      if(str === 'right'){ side = 'left';}
    });
    var moveRatio = 0.1;
    var amountToMove;
    var moveTime = 200;
    var flipSide;
    if(side === 'left'){
      amountToMove = '+=' + parseInt(($scrollPanel.width() * moveRatio)).toString() + 'px';
      flipSide = 'right';
    }
    if(side === 'right'){
      amountToMove = '-=' + parseInt(($scrollPanel.width() * moveRatio)).toString() + 'px';
      flipSide = 'left';
    }
    var $arrow = $('#events-arrow-' + flipSide);
    var propertyToColor = 'border-' + side + '-color';
    var arrowColorActive = $('a').css('color');
    $arrow.css(propertyToColor, arrowColorActive);

    $scrollWindow.scrollTo(amountToMove, 0, {duration: moveTime, onAfter: function(){
      $arrow.css(propertyToColor, arrowColorRested);
    }});
  }

  function tryptGlow(){
    $('[class^="trypt-bright"]').animate({'opacity': '1'}, 1500);
  }

  function tryptFade(){
    $('[class^="trypt-bright"]').animate({'opacity': '.2'}, 1500);
  }

  function getFacebookEvent(event){
    var facebookId = $('#event_facebook_id').val();
    FB.login(function(response){
      if(response.status === 'connected'){
        FB.api('/v2.2/' + facebookId, function(apiResponse){
          $('#event_title').val(apiResponse.name);
          $('#event_description').val(apiResponse.description);
          var date = apiResponse.start_time.split('T')[0];
          var year = date.split('-')[0];
          var month = date.split('-')[1];
          var day = date.split('-')[2];
          $('#event_date_1i option:contains(' + year + ')').prop({selected:true});
          $('#event_date_2i option:contains(' + convertToMonthString(month) + ')').prop({selected:true});
          $('#event_date_3i option:contains(' + day + ')').prop({selected:true});
          var time = apiResponse.start_time.split('T')[1];
          var hour = time.split(':')[0];
          var minute = time.split(':')[1];
          var newTime = hour + ':' + minute;
          $('#event_time').val(newTime);
          $('#event_venue').val(apiResponse.location);
          $('#event_city').val(apiResponse.venue.city);
          $('#event_street').val(apiResponse.venue.street);
          $('#event_zip').val(apiResponse.venue.zip);

        });
      }
    });
    event.preventDefault();
  }

  function convertToMonthString(month){
    var newMonth = '';
    switch(month){
      case '01':
        newMonth = 'January';
        break;
      case '02':
        newMonth = 'February';
        break;
      case '03':
        newMonth = 'March';
        break;
      case '04':
        newMonth = 'April';
        break;
      case '05':
        newMonth = 'May';
        break;
      case '06':
        newMonth = 'June';
        break;
      case '07':
        newMonth = 'July';
        break;
      case '08':
        newMonth = 'August';
        break;
      case '09':
        newMonth = 'September';
        break;
      case '10':
        newMonth = 'October';
        break;
      case '11':
        newMonth = 'November';
        break;
      case '12':
        newMonth = 'December';
        break;
    }
    return newMonth;
  }

})();
